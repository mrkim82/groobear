<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.groo.bear.pro.mapper.ProPostMapper">
	
	<!-- 상단메뉴바 조회 -->
	<select id="readTopMenu" resultType="ProPostVO">
		SELECT m.pro_color, m.pro_star_check, m.home_tab, p.pro_name, p.pro_content, p.pro_no
		FROM pro_mem m JOIN pro p
		ON m.pro_no = p.pro_no
		WHERE p.pro_no = #{proNo}
		AND m.id = #{id}
	</select>
	
	<!-- 상단메뉴바 인원수 조회 -->
	<select id="readTopMenuCount" resultType="int">
		SELECT COUNT(m1.pro_mem_no) AS count
		FROM pro_mem m1 INNER JOIN (SELECT pro_no FROM pro_mem WHERE id = #{id}) m2
		ON m1.pro_no = m2.pro_no
		WHERE pro_parti_check = 'Y'
		AND m1.pro_no = #{proNo}
		GROUP BY m1.pro_no
	</select>
	
	<!-- 프로젝트 참가자 조회 --><!-- 일정 참가자 반복문 -->
	<select id="readProjectParti" parameterType="ProPostUserVO">
		SELECT i.name
		     , u.email
		     , u.phone
		     , u.profile_note
		     , m.id
		     , e.uuid
		     , e.upload_path
		     , e.file_name
		     , i.rank
		     , d.dept_name
		     , u.emp_no
		FROM pro_mem m
		JOIN users u
		ON(m.id = u.id)
		JOIN user_info i
		ON(u.emp_no = i.emp_no)
		JOIN departments d
		ON(i.dept_no = d.dept_no)
		LEFT JOIN files e
		ON (e.id = m.id)
		WHERE m.pro_no = #{proNo}
		AND m.pro_parti_check = 'Y'
		ORDER BY i.name
	</select>
	
	<!-- 글 생성(1번) -->
	<select id="createPostWriting" statementType="CALLABLE" parameterType="ProPostWritingVO">
		{call cre_pro_writing(
				#{proNo, 		   mode=IN,  jdbcType=INTEGER,  javaType=INTEGER},
				#{id, 	           mode=IN,  jdbcType=VARCHAR,  javaType=String},
				#{postTitle,	   mode=IN,  jdbcType=VARCHAR,  javaType=String},
				#{writingContent,  mode=IN,  jdbcType=VARCHAR,  javaType=String}
			)
		}
	</select>
	
	<!-- 업무 생성(2번) -->
	<insert id="createPostWork" statementType="CALLABLE" parameterType="ProPostWorkVO">
		{call cre_pro_work(
				#{proNo, 		  mode=IN,  jdbcType=INTEGER},
				#{id, 	          mode=IN,  jdbcType=VARCHAR},
				#{postTitle,	  mode=IN,  jdbcType=VARCHAR},
				#{workGroupNo,    mode=IN,  jdbcType=INTEGER},
				#{workStatus,     mode=IN,  jdbcType=CHAR},
				#{workPri,        mode=IN,  jdbcType=CHAR},
				#{workStartDay,   mode=IN,  jdbcType=DATE},
				#{workStartTime,  mode=IN,  jdbcType=DATE},
				#{workEndDay,     mode=IN,  jdbcType=DATE},
				#{workEndTime,    mode=IN,  jdbcType=DATE},
				#{workContent,    mode=IN,  jdbcType=VARCHAR}
			    <if test="workPersonArr != null">
			        , #{workPersonArr, mode=IN, typeHandler=com.groo.bear.pro.mapper.OracleArrayHandler}
				</if>
				<if test="workPersonArr == null">
				    , null
				</if>
			)
		}
	</insert>
	
	<!-- 피드 글 조회 -->
	<select id="readFeedPost" resultType="ProPostFeedVO">
		SELECT a.pro_post_no, a.post_type, a. post_title, post_date, a.id, k.name,
		        b.writing_no, b.writing_content,
		        c.work_no, c.work_status, c.work_pri,
		        c.work_start_day, c.work_start_time, c.work_end_day, c.work_end_time,
		        c.lr_work_seq, c.work_content,
		        f.sch_no, f.sch_start_day, f.sch_start_time, f.sch_end_day, f.sch_end_time,
		        f.sch_place, f.sch_content,
		        i.vote_no, i.vote_content, i.vote_end_day, i.vote_end_check, e.work_group_no,
		        g.uuid, g.upload_path, g.file_name
		        
		FROM pro_post a
		LEFT JOIN pro_writing b
		ON(a.pro_post_no = b.pro_post_no)
		LEFT JOIN pro_work c
		ON(a.pro_post_no = c.pro_post_no)
		LEFT JOIN work_group e
		ON(c.work_group_no = e.work_group_no)
		LEFT JOIN pro_sch f
		ON(a.pro_post_no = f.pro_post_no)
		LEFT JOIN vote i
		ON(a.pro_post_no = i.pro_post_no)
		INNER JOIN users j
		ON(a.id = j.id)
		INNER JOIN user_info k
		ON(j.emp_no = k.emp_no)
		LEFT JOIN files g
		ON(a.id = g.id)
		
		WHERE (f.personal_sch = 'N' or f.personal_sch IS NULL)
		AND a.pro_no = #{proNo}
		<if test="postType != 0">
		    AND a.post_type = #{postType}
		</if>
		ORDER BY pro_post_no DESC
	</select>
	
	<!-- 글 댓글 조회(임시) -->
	<select id="readPostWritingComment" resultType="ProPostCommentVO">
		SELECT a.com_no, a.com_content, a.com_date,
			   c.name, a.id, p.pro_post_no,
			   e.uuid, e.upload_path, e.file_name
			   
		FROM com a JOIN users b
		ON(a.id=b.id)
		JOIN user_info c
		ON(b.emp_no = c.emp_no)
		JOIN pro_post p
		ON(a.pro_post_no = p.pro_post_no)
		LEFT JOIN files e
		ON (e.id = a.id)
		
		WHERE a.com_no IN (SELECT com_no
		                  FROM com
		                  WHERE pro_post_no IN (SELECT pro_post_no
		                                        FROM pro_post
		                                        WHERE pro_no = #{proNo}))
		ORDER BY a.com_no
	</select>
	
	<!-- 댓글 작성 -->
	<insert id="createPostComment" parameterType="ProPostCommentVO">
		INSERT INTO com(com_no, pro_post_no, com_content, id)
		VALUES ((SELECT NVL(MAX(com_no), 0) +1
				 FROM com),
		         #{proPostNo},
		         #{comContent},
		         #{id}
		)
		
		<selectKey resultType="int" keyProperty="comNo" order="AFTER">
			SELECT NVL(MAX(com_no), 0)
		      FROM com
		</selectKey>
	</insert>
	
	<!-- 댓글 삭제 -->
	<delete id="deletePostComment" parameterType="int">
		DELETE FROM com
		WHERE com_no = #{comNo}
	</delete>
	
	<!-- 댓글 수정 -->
	<update id="updatePostComment" parameterType="ProPostCommentVO">
		UPDATE com
		SET com_content = #{comContent}
		WHERE com_no = #{comNo}
	</update>
	
	<!-- 게시글 조회 업무 상태 변경 -->
	<update id="updateWorkPostStatus" parameterType="ProPostWorkVO">
		UPDATE pro_work
		SET work_status = #{workStatus}
		WHERE work_no = #{workNo}
	</update>
	
	<!-- 차트 조회 -->
	<select id="readPostChart" parameterType="ProPostChartVO">
		SELECT work_status, 100 * COUNT(work_status)/(SELECT COUNT(work_status)
		                                        FROM pro_work a
		                                        JOIN pro_post b
		                                        ON(a.pro_post_no = b.pro_post_no)
		                                        WHERE b.pro_no = #{proNo}) AS count
		FROM pro_work a
		JOIN pro_post b
		ON(a.pro_post_no = b.pro_post_no)
		WHERE b.pro_no = #{proNo}
		GROUP BY work_status
	</select>
	
	<!-- 프로필 메모 변경 -->
	<update id="updateProfileMemo" parameterType="ProPostUserVO">
		UPDATE users
		SET profile_note = #{profileNote}
		WHERE id = #{id}
	</update>
	
	<!-- 투표1 등록 -->
	<insert id="createVotePost" parameterType="CreateVoteVO">
		INSERT INTO pro_post(pro_post_no, pro_no, id, post_type, post_title)
		VALUES((SELECT NVL(MAX(pro_post_no), 0) + 1
		        FROM pro_post),
		        #{proNo},
		        #{id},
		        5,
		        #{postTitle}
		)
	</insert>
	
	<!-- 투표 상세 내용 등록 -->
	<insert id="createVoteContent" parameterType="CreateVoteVO">
		INSERT INTO vote(vote_no, pro_post_no, vote_content, vote_end_day)
		VALUES((SELECT NVL(MAX(vote_no), 0) + 1
		        FROM vote),
		       (SELECT NVL(MAX(pro_post_no), 0)
		        FROM pro_post),
		        #{voteContent},
		        TO_DATE('2023-07-22 18:00', 'YYYY-MM-DD HH24:MI')
		)
	</insert>

	<!-- 글 삭제  -->
	<delete id="deleteProPost">
		DELETE FROM pro_post
		WHERE pro_post_no = #{proPostNo}	
	</delete>
	
	<!-- 게시글 제목 변경 -->
	<update id="updateProPostTitle">
		UPDATE pro_post
		SET post_title = #{postTitle}
		WHERE pro_post_no = #{proPostNo}
	</update>
	
	<!-- 글 내용 변경 -->	
	<update id="updateProWriting" parameterType="ProWritingUVO">
		UPDATE pro_writing
		SET writing_content = #{writingContent}
		WHERE pro_post_no = #{proPostNo}
	</update>	
	
	<!-- 프로젝트 내 검색 -->
	<select id="readProInSearch" resultType="ProDetailSearchVO" parameterType="ProDetailSearchVO">
		SELECT a.pro_no,
			   a.pro_post_no,
			   a.post_type,
			   a.post_date,
			   a.post_title,
			   a.id,
			   b.writing_content,
			   c.sch_content,
			   d.vote_content,
			   e.work_content,
			   f.todo_content,
			   i.name
			   
		FROM pro_post a
		LEFT JOIN pro_writing b
		ON(a.pro_post_no = b.pro_post_no)
		LEFT JOIN pro_sch c
		ON(a.pro_post_no = c.pro_post_no)
		LEFT JOIN vote d
		ON(a.pro_post_no = d.pro_post_no)
		LEFT JOIN pro_work e
		ON(a.pro_post_no = e.pro_post_no)
		LEFT JOIN todo f
		ON(a.pro_post_no = f.pro_post_no)
		JOIN users u
		ON(a.id = u.id)
		JOIN user_info i
		ON(u.emp_no = i.emp_no)
		
		WHERE a.pro_no = #{proNo}
		AND a.post_title LIKE '%${search}%'
		OR b.writing_content LIKE '%${search}%'
		OR c.sch_content LIKE '%${search}%'
		OR d.vote_content LIKE '%${search}%'
		OR e.work_content LIKE '%${search}%'
		OR f.todo_content LIKE '%${search}%'
		OR i.name LIKE '%${search}%'
		ORDER BY a.pro_post_no DESC, d.vote_no, f.todo_no
	</select>
	
	<!-- 프로젝트 초대 할 인원 리스트 -->
	<select id="readPartiListM" parameterType="ProPartiListVO">
		SELECT a.name, a.rank, b.id, b.email
		FROM user_info a
		JOIN users b
		ON(a.emp_no = b.emp_no)
		
		MINUS
		
		SELECT c.name, c.rank, a.id, b.email
		FROM pro_mem a
		JOIN users b
		ON(a.id = b.id)
		JOIN user_info c
		ON(b.emp_no = c.emp_no)
		WHERE a.pro_no = #{proNo}
	</select>
	
	<!-- 프로젝트 초대 -->
	<insert id="createInviteMail" parameterType="ProPartiListVO">
		INSERT INTO pro_mem(pro_mem_no, pro_no, id, pro_parti_check, home_tab)
		VALUES((SELECT NVL(MAX(pro_mem_no), 0) + 1
		        FROM pro_mem),
		        #{proNo},
		        #{id},
		        'N',
		        (SELECT pro_def_tab FROM pro WHERE pro_no = #{proNo})
		)
	</insert>
	
	<!-- 프로젝트 삭제 -->
	<delete id="deletePro">
		DELETE FROM pro
		WHERE pro_no =#{proNo}
	</delete>
	
	<!-- 프로젝트 게시물 마지막 고유번호 -->
	<select id="readProPostNo" resultType="int">
		SELECT NVL(MAX(pro_post_no), 0)
		FROM pro_post
	</select>
	
	<!-- 프로젝트 나가기 -->
	<delete id="delteProMemOut">
		DELETE FROM pro_mem
		WHERE pro_no = #{proNo}
		AND id = #{id}
	</delete>
	
	<!-- 프로젝트 인원(단건) -->
	<select id="readProDetailCount" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM pro_mem
		WHERE pro_no = #{proNo}
		AND pro_parti_check = 'Y'
	</select>
	
	<!-- 개인 프로필 이미지(댓글) -->
	<select id="readPerProfileImg" resultType="ProUserImgVO">
		SELECT uuid, upload_path, file_name
		FROM files
		WHERE id = #{id}
	</select>
</mapper>