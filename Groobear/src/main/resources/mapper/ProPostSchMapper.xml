<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.groo.bear.pro.mapper.ProPostSchMapper">
	
	<!-- 프로젝트 일정 참여자 조회 -->
	<select id="readSchparti" resultType="ProPostSchVO">
		SELECT s.sch_no, 
		       s.pro_post_no, 
		       p.parti_check, 
		       p.id, 
		       i.name, 
		       u.profile_img
		
		FROM pro_sch s 
		JOIN sch_parti p
		  ON(s.sch_no = p.sch_no)
		JOIN users u
		  ON(p.id = u.id)
		JOIN user_info i
		  ON(u.emp_no = i.emp_no)
		
		WHERE p.id = #{id}
		AND s.sch_no IN (SELECT sch_no
		                 FROM sch_parti
		                 WHERE id = #{id})
		AND s.personal_sch = 'N'
		
		ORDER BY 1 DESC
	</select>

	<!-- 참여여부 변경 -->
	<update id="updateSchPartiCheck" parameterType="ProPostSchVO">
		UPDATE sch_parti
		SET parti_check = #{partiCheck}
		WHERE sch_no = #{schNo}
		AND id = #{id}
	</update>
	
	<!-- 참석자 현황 -->
	<select id="readPartiList" resultType="ProPostSchVO">
		with pm as
		( select p.sch_no, m.id 
		  from (SELECT * 
		          FROM pro_mem WHERE pro_no = 1 AND pro_parti_check = 'Y'
		        ) m,
		        ( SELECT *
		        FROM pro_sch a
		        JOIN pro_post b
		        ON(a.pro_post_no = b.pro_post_no)
		        WHERE b.pro_no = #{proNo}
		        )p 
		)
		SELECT pm.sch_no, pm.id, a.parti_check
		FROM sch_parti a
		RIGHT OUTER JOIN pro_sch b
		ON(a.sch_no = b.sch_no)
		RIGHT OUTER JOIN pm
		ON(pm.sch_no = a.sch_no AND pm.id = a.id)
	</select>
	
	<select id="readPartiZone" resultType="ProPostSchVO">
		SELECT a.sch_no, a.parti_check, b.pro_post_no, i.name, a.id
		FROM sch_parti a JOIN pro_sch b
		ON(a.sch_no = b.sch_no)
		JOIN pro_post c
		ON(b.pro_post_no = c.pro_post_no)
		JOIN users u
		ON(a.id = u.id)
		JOIN user_info i
		ON(u.emp_no = i.emp_no)
		WHERE pro_no = #{proNo}
		ORDER BY sch_no, name
	</select>
	
	<!-- 참석자 전체 삭제 -->
	<delete id="deletePartiMemberAll" parameterType="int">
		DELETE FROM sch_parti
		WHERE sch_no = #{schNo}
	</delete>
	
	<!-- 참석자 추가 -->
	<insert id="insertPartiMember" parameterType="ProPostSchVO">
		INSERT INTO sch_parti(sch_no, parti_check, id)
		VALUES(#{schNo}, #{partiCheck}, #{id})
	</insert>
	
	<!-- 캘린더(프로젝트) 화면 조회 -->
	<select id="readWorkSchView" resultType="ProPostWorkSchVO">
		SELECT '[' ||
		        CASE WHEN b.work_status = '1' THEN '요청'
		             WHEN b.work_status = '2' THEN '진행'
		             WHEN b.work_status = '3' THEN '피드백'
		             WHEN b.work_status = '4' THEN '완료'
		             WHEN b.work_status = '5' THEN '보류'
		        END || '] ' || a.post_title AS title,
		        
		        b.work_start_time AS "start",
		        b.work_end_time AS end,
		        a.pro_post_no,
        		a.post_type
		        
		FROM pro_post a
		JOIN pro_work b
		ON(a.pro_post_no = b.pro_post_no)
		WHERE a.pro_no = #{proNo}
		
		UNION ALL
		
		SELECT '일정 : ' || a.post_title AS title,
				b.sch_start_time AS "start",
				b.sch_end_time AS end,
				a.pro_post_no,
				a.post_type
				
		FROM pro_post a
		JOIN pro_sch b
		ON(a.pro_post_no = b.pro_post_no)
		WHERE (b.personal_sch IS NULL OR b.personal_sch = 'N')
		AND a.pro_no = #{proNo}
	</select>
	
	
	<!-- 캘린더(개인) 화면 조회 -->
	<select id="readPersonalSch" resultType="ProPostWorkSchVO">
		SELECT '일정(프로젝트) : ' || c.post_title AS title,
		       b.sch_start_time AS "start",
		       b.sch_end_time AS end,
		       c.pro_no,
			   c.pro_post_no
		FROM sch_parti a
		JOIN pro_sch b
		ON(a.sch_no = b.sch_no)
		JOIN pro_post c
		ON(b.pro_post_no = c.pro_post_no)
		WHERE a.id = #{id}
		AND b.personal_sch = 'N'
		
		UNION ALL
		
		SELECT '개인 일정 : ' || a.post_title AS title,
		b.sch_start_time AS "start",
		b.sch_end_time AS end,
		a.pro_no,
		a.pro_post_no
		
		FROM pro_post a
		JOIN pro_sch b
		ON(a.pro_post_no = b.pro_post_no)
		WHERE a.id = #{id}
		AND b.personal_sch = 'Y'
	</select>
	
	<!-- 캘린더 단건 조회 -->
	<select id="readCalDetail" resultType="ProSchDetailVO">
		SELECT a.pro_post_no
			 , a.post_title
			 , a.post_date
			 , a.id
			 , i.name
			 , u.profile_img
			 , b.sch_no
			 , b.sch_start_time
			 , b.sch_end_time
			 , b.sch_place
			 , b.sch_content
			 
		FROM pro_post a
		JOIN pro_sch b
		ON(a.pro_post_no = b.pro_post_no)
		JOIN users u
		ON(a.id = u.id)
		JOIN user_info i
		ON(u.emp_no = i.emp_no)
		
		WHERE a.pro_no = #{proNo}
		AND a.post_type = 3
		ORDER BY a.pro_post_no
	</select>
	
	<!-- 개인 캘린더 상세 조회 -->
	<select id="readPerCalDetail" resultType="ProSchDetailVO">
		SELECT a.post_title, a.post_date, a.pro_post_no, a.id,
		       b.sch_no, b.sch_start_time, b.sch_end_time, b.sch_place,
		       b.sch_content
		FROM pro_post a
		JOIN pro_sch b
		ON(a.pro_post_no = b.pro_post_no)
		WHERE a.id = #{id}
		AND b.personal_sch = 'Y'
	</select>
	
	<!-- 개인 캘린더 댓글 조회 -->
	<select id="readPerCalCom" resultType="ProPostCommentVO">
		SELECT a.com_no, a.com_content, a.com_date,
		       c.name, b.profile_img, a.id, a.pro_post_no
		FROM com a
		JOIN users b
		  ON a.id = b.id
		JOIN user_info c
		  ON b.emp_no = c.emp_no
		JOIN pro_post d
		  ON a.pro_post_no = d.pro_post_no
		WHERE a.id = #{id}
		AND d.pro_no = 7
	</select>
	
	<!-- 회원 탈퇴용 참가자 삭제 -->
	<delete id="deleteMemberSchParti">
		DELETE sch_parti
		WHERE id = #{id}
	</delete>
	
</mapper>