<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.groo.bear.mail.mapper.MailMapper">
	<!-- 메일발송 -->
	<insert id="sendMail" statementType="CALLABLE" parameterType="MailVO">
		 {call cre_mailsend(sysdate,
		 					sysdate,
		 		<choose>
					<when test="deleteDate != null">
							#{deleteDate},
					</when>
					<otherwise>
							'',
					</otherwise>
				</choose>
		 					'N',
		 					'S',
		 					#{id},
		 					#{title},
		 					#{content},
		 					#{sender},
		 					#{receiver},
		 		<choose>
				<when test="referrer != null and !referrer.equals('')">
		 					#{referrer},
		 		</when>
		 		<otherwise>
		 					'',
		 		</otherwise>
		 		</choose>
		 					'S',
		 					#{id}
		 					)}
	</insert>
	<!-- 메일 전체리스트 -->
	<select id="mailAllList" resultType="MailVO">
		SELECT a.mail_no, a.send_date, a.receive_date, a.delete_date, a.read_check, a.mail_type, a.id,a.mail_set,b.title,b.content,c.sender,c.receiver,c.referrer
		FROM mail a, mail_details b, mail_personnel c
		WHERE a.mail_no = b.mail_no 
		AND b.mail_no = c.mail_no
		AND a.mail_set = 'N'
		ORDER BY a.mail_no
	</select>
	<!-- 메일 전체리스트 조회 발송후 update -->
	<update id="mailSetUpdate" parameterType="int">
		UPDATE mail
		SET mail_set = 'Y'
		WHERE mail_no = #{mailNo}
	</update>
	<!-- 메일함전체조회임 잊지말것 -->
	<select id="deletedMail" resultType="MailVO">
          SELECT * 
          FROM (SELECT g.mail_no,g.send_date,g.receive_date,
			g.delete_date,g.read_check,g.mail_type,
			g.mail_set,g.title,g.content, g.sender, g.receiver, g.referrer, g.id, ROWNUM AS rn FROM 
	(SELECT c.mail_no,c.send_date,c.receive_date,
			c.delete_date,c.read_check,
			c.mail_set,c.title,c.content, d.sender, d.receiver, d.referrer, d.id, d.mail_type
          FROM mail_personnel d JOIN
		(SELECT a.mail_no, a.send_date, a.receive_date, a.delete_date,
		 a.read_check, a.mail_type, a.id,a.mail_set,b.title,b.content 
		 FROM mail a JOIN mail_details b ON a.mail_no = b.mail_no) c
			ON c.mail_no = d.mail_no
			
                  where d.mail_type = #{mailVO.mailType}
                  And c.mail_set = 'Y'
                  <if test="mailVO.receiver != null and mailVO.referrer != null">
                 		AND (d.receiver = #{mailVO.receiver}
                  		OR d.referrer = #{mailVO.referrer})
						AND d.id = #{mailVO.id}
                 	</if>
			<if test="mailVO.sender != null and mailVO.receiver == null">
					AND d.sender = #{mailVO.sender}
					AND d.id = #{mailVO.id}
			</if>
			<if test="mailVO.receiver != null and mailVO.sender != null">
					AND (d.receiver = #{mailVO.receiver}
					 OR d.sender = #{mailVO.sender}
					 OR d.referrer = #{mailVO.referrer})
					 AND d.id = #{mailVO.id}
			</if>
			<if test="mailVO.deleteDate != null">
                  			AND c.delete_date = #{mailVO.deleteDate}
  	        	</if>
              )g
          )
          <![CDATA[
          WHERE rn >= (#{cri.page}-1) * #{cri.perPageNum} +1 AND rn <= #{cri.page} * #{cri.perPageNum}
          ]]>
	</select>
	<!-- 지운메일 갯수 출력 -->
	<select id="countDeleteMail" resultType="int">
		SELECT COUNT(*)
        FROM getmail
            where ( 
            	(sender = #{sender} and mail_type=#{mailType}) OR
	                (receiver = #{receiver} and mail_type2=#{mailType}) OR
	                (referrer = #{referrer} and mail_type3=#{mailType}) OR
	                (referrer2 = #{referrer2} and mail_type4=#{mailType}) OR
	                (referrer3 = #{referrer3} and mail_type5=#{mailType}) )
            ORDER BY send_date
	</select>
	<!-- 보낸메일 갯수 출력 -->
	<select id="countSendMail" resultType="int">
		SELECT COUNT(*) FROM mail m, mail_personnel p
            WHERE m.mail_no = p.mail_no
            AND p.sender = #{sender}
            AND p.mail_type = #{mailType}
	</select>
	<!-- 받은메일 갯수 출력 -->
	<select id="countReceiveMail" resultType="int">
		SELECT COUNT(*) FROM getmail
			WHERE (
			(receiver = #{receiver} AND mail_type2=#{mailType2}) OR
			(referrer = #{referrer} AND mail_type3=#{mailType3}) OR
			(referrer2 = #{referrer2} AND mail_type4=#{mailType4}) OR
			(referrer3 = #{referrer3} AND mail_type5=#{mailType5})
			)
	</select>
	
	<!-- 메일삭제(지운메일함으로) -->
	<delete id="deleteMail" parameterType="MailVO">
		UPDATE mail_personnel
		SET mail_type = 'D'
		WHERE mail_no = #{mailNo}
		AND id = #{id}
	</delete>
	<!-- 완전삭제(db에서 삭제) -->
	<delete id="realDeleteMail" parameterType="MailVO">
		delete mail_personnel
		where mail_no=#{mailNo}
		AND id = #{id}
	</delete>
	<!-- 메일 상세조회 -->
	<select id="mailInfo" resultType="MailVO">
		SELECT a.mail_no, a.send_date, a.receive_date, a.delete_date, a.read_check,b.title,b.content,c.sender,c.receiver,c.referrer,c.id
		FROM mail a, mail_details b, mail_personnel c
		WHERE a.mail_no = b.mail_no 
		AND b.mail_no = c.mail_no
		AND a.mail_no = #{mailNo}
		AND c.id = #{id}
	</select>
	<!-- 메일번호 받아오는 쿼리문 -->
	<select id="mailNo" resultType="int">
		SELECT NVL(MAX(mail_no),0)+1 as mail_no FROM mail
	</select>
	<!-- 메일 작성시 personnel에 추가용도 -->
	<insert id="insertPersonnel" parameterType="MailVO">
		INSERT INTO mail_personnel(sender,receiver,referrer,mail_no,id,mail_type)
							VALUES(
									#{sender},
									#{receiver},
									#{referrer},
									#{mailNo},
									#{id},
									'S'
							)
	</insert>
	<!-- personnel 최대번호 조회 -->
	<select id="personnelNo" resultType="int">
		SELECT MAX(mail_no) FROM mail_personnel
	</select>
	<!-- 이메일로 유저정보 받아오기 -->
	<select id="userIdGet" resultType="String">
		select id FROM users
		where email=#{email}
	</select>
	<!-- mailsever에서 받아온 session 유저에게온 메일을 저장 -->
	<insert id="serverGetInsertMail" parameterType="MailVO">
		INSERT INTO getmail(mail_no
							,title
							,content
							,sender
							,receiver
							,referrer
							,referrer2
							,referrer3
							,send_date
							,receive_date
							,mail_check
							,mail_type
							,mail_type2
							,mail_type3
							,mail_type4
							,mail_type5)
					VALUES(
							(SELECT NVL(MAX(mail_no),0)+1 FROM getmail)
							,#{title}
							,#{content}
							,#{sender}
							,#{receiver}
							<choose>
							<when test="referrer != null and !referrer.equals('')">
					 		,#{referrer}
					 		</when>
					 		<otherwise>
					 		,''
					 		</otherwise>
					 		</choose>
					 		<choose>
					 		<when test="referrer2 != null and !referrer2.equals('')">
					 		,#{referrer2}
					 		</when>
					 		<otherwise>
					 		,''
					 		</otherwise>
					 		</choose>
					 		<choose>
							<when test="referrer3 != null and !referrer3.equals('')">
					 		,#{referrer3}
					 		</when>
					 		<otherwise>
					 		,''
					 		</otherwise>
					 		</choose>
							,sysdate
							,sysdate
							,'N'
							,'R'
							,'R'
							,'R'
							,'R'
							,'R'
							)
	</insert>
	<!-- 받은메일함 -->
	<select id="getMailList" resultType="MailVO">
     	 SELECT b.* FROM 
			(SELECT a.*,ROWNUM as rn FROM 
			(SELECT mail_no,title,content,sender,receiver,referrer,referrer2,referrer3,send_date,
			        receive_date,mail_check,mail_type,mail_type2,mail_type3,mail_type4,mail_type5
			        FROM getmail
			            where ((receiver = #{mailVO.receiver} and mail_type2=#{mailVO.mailType2}) OR
			                (referrer = #{mailVO.referrer} and mail_type3=#{mailVO.mailType3}) OR
			                (referrer2 = #{mailVO.referrer2} and mail_type4=#{mailVO.mailType4}) OR
			                (referrer3 = #{mailVO.referrer3} and mail_type5=#{mailVO.mailType5}))
			            ORDER BY mail_check
            ) a 
         )b
		  <![CDATA[
          	WHERE rn >= (#{cri.page}-1) * #{cri.perPageNum} +1 AND rn <= #{cri.page} * #{cri.perPageNum}
          ]]>
	</select>
	<!-- 새 테이블(서버에서 받은 메일함) 상세조회 -->
	<select id="getMailInfo" resultType="MailVO">
		SELECT * FROM getmail
		where mail_no = #{mailNo}
	</select>
	<!-- 새 테이블(서버에서 받은 메일함) 상세조회 시 읽은메일로 변경 -->
	<update id="getMailInfoUpdate" parameterType="MailVO">
		UPDATE getmail
		set mail_check = #{readCheck}
		where mail_no = #{mailNo}
	</update>
	<!-- 새 테이블(서버에서 받은 메일함) 보낸메일함 조회 -->
	<select id="getMailSend" parameterType="MailVO">
		SELECT b.* FROM 
			(SELECT a.mail_no,a.title,a.content,a.sender,a.receiver,a.referrer,a.referrer2,a.referrer3,a.send_date,
			        a.receive_date,a.mail_check,a.mail_type,a.mail_type2,a.mail_type3,a.mail_type4,a.mail_type5,ROWNUM as rn FROM 
			(SELECT mail_no,title,content,sender,receiver,referrer,referrer2,referrer3,send_date,
		        receive_date,mail_check,mail_type,mail_type2,mail_type3,mail_type4,mail_type5
		        FROM getmail
		            where ( sender = #{mailVO.sender} and mail_type=#{mailVO.mailType}  )
		            ORDER BY mail_no desc
		            ) a )b
		     <![CDATA[
          	WHERE rn >= (#{cri.page}-1) * #{cri.perPageNum} +1 AND rn <= #{cri.page} * #{cri.perPageNum}
          ]]>
	</select>
	<!-- 새 테이블(서버에서 받은 메일함) 지운메일함 조회 -->
	<select id="getMaildelete" parameterType="MailVO">
		SELECT b.* FROM 
			(SELECT a.mail_no,a.title,a.content,a.sender,a.receiver,a.referrer,a.referrer2,a.referrer3,a.send_date,
			        a.receive_date,a.mail_check,a.mail_type,a.mail_type2,a.mail_type3,a.mail_type4,a.mail_type5,ROWNUM as rn FROM 
			(SELECT mail_no,title,content,sender,receiver,referrer,referrer2,referrer3,send_date,
		        receive_date,mail_check,mail_type,mail_type2,mail_type3,mail_type4,mail_type5
		        FROM getmail
		            where ( (sender = #{mailVO.sender} and mail_type=#{mailVO.mailType}) OR
		                (receiver = #{mailVO.receiver} and mail_type2=#{mailVO.mailType}) OR
		                (referrer = #{mailVO.referrer} and mail_type3=#{mailVO.mailType}) OR
		                (referrer2 = #{mailVO.referrer2} and mail_type4=#{mailVO.mailType}) OR
		                (referrer3 = #{mailVO.referrer3} and mail_type5=#{mailVO.mailType}) )
		            ORDER BY mail_no desc
		            ) a )b
		    <![CDATA[
          	WHERE rn >= (#{cri.page}-1) * #{cri.perPageNum} +1 AND rn <= #{cri.page} * #{cri.perPageNum}
          ]]>
	</select>
	<!-- 새 테이블(서버에서 받은 메일함) 지우기 -->
	<update id="getMailType1Del" parameterType="MailVO">
		UPDATE getmail
		set mail_type = #{mailType}
		where mail_no = #{mailNo}
	</update>
	<update id="getMailType2Del" parameterType="MailVO">
		UPDATE getmail
		set mail_type2 = #{mailType}
		where mail_no = #{mailNo}
	</update>
	<update id="getMailType3Del" parameterType="MailVO">
		UPDATE getmail
		set mail_type3 = #{mailType}
		where mail_no = #{mailNo}
	</update>
	<update id="getMailType4Del" parameterType="MailVO">
		UPDATE getmail
		set mail_type4 = #{mailType}
		where mail_no = #{mailNo}
	</update>
	<update id="getMailType5Del" parameterType="MailVO">
		UPDATE getmail
		set mail_type5 = #{mailType}
		where mail_no = #{mailNo}
	</update>
	<!-- 보낸메일함 db에 넣는거 기준조회 -->
	<select id="sendMailSearch" resultType="MailVO">
		SELECT * FROM (SELECT g.mail_no,g.send_date,g.receive_date,
			g.delete_date,g.read_check,g.mail_type,
			g.mail_set,g.title,g.content, g.sender, g.receiver, g.referrer, g.id, ROWNUM AS rn FROM 
	(SELECT c.mail_no,c.send_date,c.receive_date,
			c.delete_date,c.read_check,
			c.mail_set,c.title,c.content, d.sender, d.receiver, d.referrer, d.id, d.mail_type
          FROM mail_personnel d JOIN
		(SELECT a.mail_no, a.send_date, a.receive_date, a.delete_date,
		 a.read_check, a.mail_type, a.id,a.mail_set,b.title,b.content 
		 FROM mail a JOIN mail_details b ON a.mail_no = b.mail_no) c
			ON c.mail_no = d.mail_no
            where d.mail_type = #{mailVO.mailType}
            and sender=#{mailVO.sender}
             ORDER BY c.send_date desc)g
          )
          <![CDATA[
          	WHERE rn >= (#{cri.page}-1) * #{cri.perPageNum} +1 AND rn <= #{cri.page} * #{cri.perPageNum}
          ]]>
	</select>
</mapper>