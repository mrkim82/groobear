<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.groo.bear.payment.mapper.PaymentMapper">
	<!-- 결재자 리스트, 정보 -->
	<select id="payEmpList" resultType="EmpVO">
		SELECT * FROM users u, user_info i, departments d
		WHERE u.emp_no = i.emp_no 
		AND i.dept_no = d.dept_no
	</select>
	<!-- 기안자 정보 Id,emp_no,name,rank,dept_name -->
	<select id="payEmpInfo" resultType="EmpVO">
		SELECT u.id,u.emp_no,i.name,i.rank,d.dept_name FROM users u, user_info i, departments d
			WHERE i.dept_no = d.dept_no
			AND u.emp_no = i.emp_no
			AND u.emp_no = (SELECT emp_no 
								FROM users
								WHERE id = #{id})
	</select>
	<!-- 문서번호 받아오는 쿼리문 -->
	<select id="paymentNo" resultType="int">
		SELECT NVL(MAX(pay_no),0)+1 as pay_no FROM payment
	</select>
	<!-- 결재문서 insert -->
	<insert id="paymentInsert" parameterType="PaymentVO">
		INSERT INTO payment(pay_no,issue_date,doc_type,id,approver2,approver3,referrer,pay_status1,public_sign) 
						VALUES(
								#{payNo},
								sysdate,
								#{docType},
								#{id},
								#{approver2},
								<choose>
								<when test="approver2 != null and !approver2.equals('')">
								#{approver3},
								</when>
								<otherwise>
								'',
								</otherwise>
								</choose>
								<choose>
								<when test="referrer != null and !referrer.equals('')">
								#{referrer},
								</when>
								<otherwise>
								'',
								</otherwise>
								</choose>
								'Y',
								<choose>
								<when test="publicSign != null and !publicSign.equals('')">
								#{publicSign}
								</when>
								<otherwise>
								''
								</otherwise>
								</choose>
								)
	</insert>
	<!-- 결재문서 운행일지 삽입 -->
	<insert id="logDataInsert" parameterType="PaymentVO">
		INSERT INTO payment_logbook(oper_date,destination,befored,afterd,imprest,purpose,pay_no)
					VALUES(
							#{operDate},
							#{destination},
							#{befored},
							#{afterd},
							#{imprest},
							#{purpose},
							#{payNo}
					)
	</insert>
	<!-- 결재문서 연차계 삽입-->
	<insert id="offDataInsert" parameterType="PaymentVO">
		INSERT INTO payment_off(title,content,com,use_date,return_date,pay_no)
					VALUES(
							#{title},
							#{content},
							<choose>
							<when test="com != null and !com.equals('')">
							#{com},
							</when>
							<otherwise>
								'',
							</otherwise>
							</choose>
							#{useDate},
							#{returnDate},
							#{payNo}
					)
	</insert>
	<!-- 결재문서 품의서 삽입-->
	<insert id="robinDataInsert" parameterType="PaymentVO">
		INSERT INTO payment_robin(title,content,com,pay_no)
					VALUES(
							#{title},
							#{content},
							<choose>
							<when test="com != null and !com.equals('')">
							#{com},
							</when>
							<otherwise>
								'',
							</otherwise>
							</choose>
							#{payNo}
					)
	</insert>
	<!-- 결재문서 운행일지 조회-->
	<select id="logList" resultType="PaymentVO">
		SELECT * FROM payment p, payment_logbook l
			WHERE p.pay_no = l.pay_no
			AND p.pay_no = #{payNo}
	</select>
	<!-- 결재문서 연차계 조회-->
	<select id="offList" resultType="PaymentVO">
		SELECT * FROM payment p, payment_off o
			WHERE p.pay_no = o.pay_no
			AND p.pay_no = #{payNo}
	</select>
	<!-- 결재문서 품의서 조회-->
	<select id="robinList" resultType="PaymentVO">
		SELECT * FROM payment p, payment_robin r
			WHERE p.pay_no = r.pay_no
			AND p.pay_no = #{payNo}
	</select>
	<!-- 결재문서 결재중(본인이 해당된) 일괄조회-->
	<select id="paymentList" resultType="PaymentVO">
		WITH payment_all AS (
	        SELECT pay_no,purpose FROM payment_logbook
	        UNION ALL 
	        SELECT pay_no,title FROM payment_off
	        UNION ALL
	        SELECT pay_no,title FROM payment_robin
		)
		SELECT * FROM (
		    SELECT p.*, a.purpose, CASE WHEN p.approver2 = #{payVO.id} AND p.pay_status3='N' THEN pay_status2 
		                                WHEN p.approver3 = #{payVO.id} AND p.pay_status3='N' THEN pay_status3 
		                                WHEN p.approver3 = #{payVO.id} AND p.pay_status2='N' THEN pay_status2
		                                ELSE pay_status1 END AS pay_status ,ROWNUM AS rn
		      FROM payment p JOIN payment_all a ON (p.pay_no = a.pay_no)
		    WHERE (p.id = #{payVO.id} OR p.approver2 = #{payVO.id} OR p.approver3 = #{payVO.id})
		    AND p.pay_status3='N')
		<![CDATA[
	            WHERE rn >= (#{cri.page}-1) * #{cri.perPageNum} +1 AND rn <= #{cri.page} * #{cri.perPageNum}
	    ]]>
		ORDER BY pay_status,pay_no
	</select>
	<!-- 결재중문서 개수(페이징용) -->
	<select id="countPaymentList" resultType="int">
		WITH payment_all AS (
        SELECT pay_no,purpose FROM payment_logbook
        UNION ALL 
        SELECT pay_no,title FROM payment_off
        UNION ALL
        SELECT pay_no,title FROM payment_robin
		)
		SELECT COUNT(*) FROM (
		    SELECT p.*,a.purpose, CASE WHEN p.approver2 = #{id} AND p.pay_status3='N' THEN pay_status2 
		                                WHEN p.approver3 = #{id} AND p.pay_status3='N' THEN pay_status3 
		                                WHEN p.approver3 = #{id} AND p.pay_status2='N' THEN pay_status2
		                                ELSE pay_status1 END AS pay_status ,ROWNUM AS rn
		      FROM payment p JOIN payment_all a ON (p.pay_no = a.pay_no)
		    WHERE (p.id = #{id} OR p.approver2 = #{id} OR p.approver3 = #{id})
		    AND p.pay_status3='N')
		ORDER BY pay_status,pay_no
	</select>
	
	<!-- 운행일지 수정 -->
	<update id="logUpdate" parameterType="PaymentVO">
		UPDATE payment_logbook
		    SET oper_date = #{operDate},
		        destination = #{destination},
		        befored = #{befored},
		        afterd = #{afterd},
		        imprest = #{imprest},
		        purpose = #{purpose}
    		WHERE pay_no = #{payNo}
	</update>
	<!-- 연차계 수정 -->
	<update id="offUpdate" parameterType="PaymentVO">
		UPDATE payment_off
		    SET title = #{title},
		        content = #{content},
		        com = #{com},
		        use_date = #{useDate},
		        return_date = #{returnDate}
		    WHERE pay_no = #{payNo}
	</update>
	<!-- 품의서 수정 -->
	<update id="robinUpdate" parameterType="PaymentVO">
		UPDATE payment_robin
		    SET title = #{title},
		        content = #{content},
		        com = #{com}
		    WHERE pay_no = #{payNo} 
	</update>
	<!-- 문서 2번결재자 결재,반려(update) -->
	<update id="payUpdateApp2" parameterType="PaymentVO">
		UPDATE payment
		    SET pay_status2= #{payStatus2}
		    WHERE approver2 = #{approver2}
		    AND pay_no = #{payNo}
	</update>
	<!-- 문서 최종결재자 결재(update)-->
	<update id="payUpdateApp3" parameterType="PaymentVO">
		UPDATE payment
		    SET pay_status3= #{payStatus3}
		    WHERE approver3 = #{approver3}
		    AND pay_no = #{payNo}
	</update>
</mapper>